{"version":3,"sources":["../../../../../lib/xlsx/xform/style/protection-xform.js"],"names":["BaseXform","require","validation","locked","value","undefined","ProtectionXform","xmlStream","model","addRollback","openNode","isValid","add","name","addAttribute","closeNode","commit","rollback","node","valid","truthy","attributes","parseInt","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,MADiB,kBACVC,KADU,EACH;AACZ,QAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,aAAO,IAAP;AACD;;AACD,WAAOD,KAAP;AACD;AANgB,CAAnB,C,CASA;;IACME,e;;;;;;;;;;;;;2BAKGC,S,EAAWC,K,EAAO;AACvBD,MAAAA,SAAS,CAACE,WAAV;AACAF,MAAAA,SAAS,CAACG,QAAV,CAAmB,YAAnB;AAEA,UAAIC,OAAO,GAAG,KAAd;;AACA,eAASC,GAAT,CAAaC,IAAb,EAAmBT,KAAnB,EAA0B;AACxB,YAAIA,KAAJ,EAAW;AACTG,UAAAA,SAAS,CAACO,YAAV,CAAuBD,IAAvB,EAA6BT,KAA7B;AACAO,UAAAA,OAAO,GAAG,IAAV;AACD;AACF;;AACDC,MAAAA,GAAG,CAAC,QAAD,EAAWV,UAAU,CAACC,MAAX,CAAkBK,KAAK,CAACL,MAAxB,IAAkCE,SAAlC,GAA8C,GAAzD,CAAH;AAEAE,MAAAA,SAAS,CAACQ,SAAV;;AAEA,UAAIJ,OAAJ,EAAa;AACXJ,QAAAA,SAAS,CAACS,MAAV;AACD,OAFD,MAEO;AACLT,QAAAA,SAAS,CAACU,QAAV;AACD;AACF;;;8BAESC,I,EAAM;AACd,UAAMV,KAAK,GAAG,EAAd;AAEA,UAAIW,KAAK,GAAG,KAAZ;;AACA,eAASP,GAAT,CAAaQ,MAAb,EAAqBP,IAArB,EAA2BT,KAA3B,EAAkC;AAChC,YAAIgB,MAAJ,EAAY;AACVZ,UAAAA,KAAK,CAACK,IAAD,CAAL,GAAcT,KAAd;AACAe,UAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AACDP,MAAAA,GAAG,CAACM,IAAI,CAACG,UAAL,CAAgBlB,MAAjB,EAAyB,QAAzB,EAAmC,CAAC,CAACmB,QAAQ,CAACJ,IAAI,CAACG,UAAL,CAAgBlB,MAAjB,EAAyB,EAAzB,CAA7C,CAAH;AACA,WAAKK,KAAL,GAAaW,KAAK,GAAGX,KAAH,GAAW,IAA7B;AACD;;;gCAEW,CAAE;;;iCAED;AACX,aAAO,KAAP;AACD;;;wBA5CS;AACR,aAAO,YAAP;AACD;;;;EAH2BR,S;;AAgD9BuB,MAAM,CAACC,OAAP,GAAiBlB,eAAjB","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nconst validation = {\r\n  locked(value) {\r\n    if (value === undefined) {\r\n      return true;\r\n    }\r\n    return value;\r\n  },\r\n};\r\n\r\n// Protection encapsulates translation from style.protection model to/from xlsx\r\nclass ProtectionXform extends BaseXform {\r\n  get tag() {\r\n    return 'protection';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.addRollback();\r\n    xmlStream.openNode('protection');\r\n\r\n    let isValid = false;\r\n    function add(name, value) {\r\n      if (value) {\r\n        xmlStream.addAttribute(name, value);\r\n        isValid = true;\r\n      }\r\n    }\r\n    add('locked', validation.locked(model.locked) ? undefined : '0');\r\n\r\n    xmlStream.closeNode();\r\n\r\n    if (isValid) {\r\n      xmlStream.commit();\r\n    } else {\r\n      xmlStream.rollback();\r\n    }\r\n  }\r\n\r\n  parseOpen(node) {\r\n    const model = {};\r\n\r\n    let valid = false;\r\n    function add(truthy, name, value) {\r\n      if (truthy) {\r\n        model[name] = value;\r\n        valid = true;\r\n      }\r\n    }\r\n    add(node.attributes.locked, 'locked', !!parseInt(node.attributes.locked, 10));\r\n    this.model = valid ? model : null;\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = ProtectionXform;\r\n"],"file":"protection-xform.js"}