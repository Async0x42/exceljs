{"version":3,"sources":["../../../lib/doc/worksheet.js"],"names":["_","require","colCache","Range","Row","Column","Enums","Image","Table","DataValidations","Worksheet","options","id","orderNo","name","state","_rows","_columns","_keys","_merges","rowBreaks","_workbook","workbook","properties","Object","assign","defaultRowHeight","dyDescent","outlineLevelCol","outlineLevelRow","pageSetup","margins","left","right","top","bottom","header","footer","orientation","horizontalDpi","verticalDpi","fitToPage","fitToWidth","fitToHeight","scale","pageOrder","blackAndWhite","draft","cellComments","errors","paperSize","undefined","showRowColHeaders","showGridLines","firstPageNumber","horizontalCentered","verticalCentered","colBreaks","headerFooter","differentFirst","differentOddEven","oddHeader","oddFooter","evenHeader","evenFooter","firstHeader","firstFooter","dataValidations","views","autoFilter","_media","tables","removeWorksheetEx","key","value","f","each","c","col","l2n","length","n","push","start","count","inserts","Array","prototype","slice","call","arguments","rows","nRows","i","rowArguments","forEach","insert","row","getRow","splice","apply","r","nExpand","nKeep","nEnd","getColumn","defn","definedNames","spliceColumns","_nextRow","values","addRow","rSrc","rDst","style","eachCell","includeEmpty","cell","colNumber","getCell","spliceRows","iteratee","hasValues","number","address","getAddress","findCell","getCellEx","dimensions","merge","intersects","Error","master","j","unmerge","type","ValueType","Merge","_unMergeMaster","range","formula","results","decoded","decode","width","masterAddress","encodeAddress","getResult","isArray","first","result","sharedFormula","imageId","model","filter","m","image","find","table","rowModel","mergeCells","rowDims","expand","min","max","_headerRowCount","reduce","pv","cv","headerCount","headers","Math","columns","column","maxCount","eachRow","cellCount","counts","_lastRowNumber","some","Boolean","console","trace","tabColor","media","map","medium","cols","toModel","merges","fromModel","_parseRows","_parseMergeCells","t","module","exports"],"mappings":"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","sourcesContent":["const _ = require('../utils/under-dash');\r\n\r\nconst colCache = require('./../utils/col-cache');\r\nconst Range = require('./range');\r\nconst Row = require('./row');\r\nconst Column = require('./column');\r\nconst Enums = require('./enums');\r\nconst Image = require('./image');\r\nconst Table= require('./table');\r\nconst DataValidations = require('./data-validations');\r\n\r\n// Worksheet requirements\r\n//  Operate as sheet inside workbook or standalone\r\n//  Load and Save from file and stream\r\n//  Access/Add/Delete individual cells\r\n//  Manage column widths and row heights\r\n\r\nclass Worksheet {\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    // in a workbook, each sheet will have a number\r\n    this.id = options.id;\r\n    this.orderNo = options.orderNo;\r\n\r\n    // and a name\r\n    this.name = options.name || `Sheet${this.id}`;\r\n\r\n    // add a state\r\n    this.state = options.state || 'visible';\r\n\r\n    // rows allows access organised by row. Sparse array of arrays indexed by row-1, col\r\n    // Note: _rows is zero based. Must subtract 1 to go from cell.row to index\r\n    this._rows = [];\r\n\r\n    // column definitions\r\n    this._columns = null;\r\n\r\n    // column keys (addRow convenience): key ==> this._collumns index\r\n    this._keys = {};\r\n\r\n    // keep record of all merges\r\n    this._merges = {};\r\n\r\n    // record of all row and column pageBreaks\r\n    this.rowBreaks = [];\r\n\r\n    this._workbook = options.workbook;\r\n\r\n    // for tabColor, default row height, outline levels, etc\r\n    this.properties = Object.assign(\r\n      {},\r\n      {\r\n        defaultRowHeight: 15,\r\n        dyDescent: 55,\r\n        outlineLevelCol: 0,\r\n        outlineLevelRow: 0,\r\n      },\r\n      options.properties\r\n    );\r\n\r\n    // for all things printing\r\n    this.pageSetup = Object.assign(\r\n      {},\r\n      {\r\n        margins: {left: 0.7, right: 0.7, top: 0.75, bottom: 0.75, header: 0.3, footer: 0.3},\r\n        orientation: 'portrait',\r\n        horizontalDpi: 4294967295,\r\n        verticalDpi: 4294967295,\r\n        fitToPage: !!(options.pageSetup && ((options.pageSetup.fitToWidth || options.pageSetup.fitToHeight) && !options.pageSetup.scale)),\r\n        pageOrder: 'downThenOver',\r\n        blackAndWhite: false,\r\n        draft: false,\r\n        cellComments: 'None',\r\n        errors: 'displayed',\r\n        scale: 100,\r\n        fitToWidth: 1,\r\n        fitToHeight: 1,\r\n        paperSize: undefined,\r\n        showRowColHeaders: false,\r\n        showGridLines: false,\r\n        firstPageNumber: undefined,\r\n        horizontalCentered: false,\r\n        verticalCentered: false,\r\n        rowBreaks: null,\r\n        colBreaks: null,\r\n      },\r\n      options.pageSetup\r\n    );\r\n\r\n    this.headerFooter = {\r\n      differentFirst: false,\r\n      differentOddEven: false,\r\n      oddHeader: null,\r\n      oddFooter: null,\r\n      evenHeader: null,\r\n      evenFooter: null,\r\n      firstHeader: null,\r\n      firstFooter: null,\r\n    };\r\n\r\n    this.dataValidations = new DataValidations();\r\n\r\n    // for freezepanes, split, zoom, gridlines, etc\r\n    this.views = options.views || [];\r\n\r\n    this.autoFilter = options.autoFilter || null;\r\n\r\n    // for images, etc\r\n    this._media = [];\r\n\r\n    // for tables\r\n    this.tables = {};\r\n  }\r\n\r\n  get workbook() {\r\n    return this._workbook;\r\n  }\r\n\r\n  // when you're done with this worksheet, call this to remove from workbook\r\n  destroy() {\r\n    this._workbook.removeWorksheetEx(this);\r\n  }\r\n\r\n  // Get the bounding range of the cells in this worksheet\r\n  get dimensions() {\r\n    const dimensions = new Range();\r\n    this._rows.forEach(row => {\r\n      if (row) {\r\n        const rowDims = row.dimensions;\r\n        if (rowDims) {\r\n          dimensions.expand(row.number, rowDims.min, row.number, rowDims.max);\r\n        }\r\n      }\r\n    });\r\n    return dimensions;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Columns\r\n\r\n  // get the current columns array.\r\n  get columns() {\r\n    return this._columns;\r\n  }\r\n\r\n  // set the columns from an array of column definitions.\r\n  // Note: any headers defined will overwrite existing values.\r\n  set columns(value) {\r\n    // calculate max header row count\r\n    this._headerRowCount = value.reduce((pv, cv) => {\r\n      const headerCount = (cv.header && 1) || (cv.headers && cv.headers.length) || 0;\r\n      return Math.max(pv, headerCount);\r\n    }, 0);\r\n\r\n    // construct Column objects\r\n    let count = 1;\r\n    const columns = (this._columns = []);\r\n    value.forEach(defn => {\r\n      const column = new Column(this, count++, false);\r\n      columns.push(column);\r\n      column.defn = defn;\r\n    });\r\n  }\r\n\r\n  getColumnKey(key) {\r\n    return this._keys[key];\r\n  }\r\n\r\n  setColumnKey(key, value) {\r\n    this._keys[key] = value;\r\n  }\r\n\r\n  deleteColumnKey(key) {\r\n    delete this._keys[key];\r\n  }\r\n\r\n  eachColumnKey(f) {\r\n    _.each(this._keys, f);\r\n  }\r\n\r\n  // get a single column by col number. If it doesn't exist, create it and any gaps before it\r\n  getColumn(c) {\r\n    if (typeof c === 'string') {\r\n      // if it matches a key'd column, return that\r\n      const col = this._keys[c];\r\n      if (col) return col;\r\n\r\n      // otherwise, assume letter\r\n      c = colCache.l2n(c);\r\n    }\r\n    if (!this._columns) {\r\n      this._columns = [];\r\n    }\r\n    if (c > this._columns.length) {\r\n      let n = this._columns.length + 1;\r\n      while (n <= c) {\r\n        this._columns.push(new Column(this, n++));\r\n      }\r\n    }\r\n    return this._columns[c - 1];\r\n  }\r\n\r\n  spliceColumns(start, count) {\r\n    // each member of inserts is a column of data.\r\n    const inserts = Array.prototype.slice.call(arguments, 2);\r\n    const rows = this._rows;\r\n    const nRows = rows.length;\r\n    if (inserts.length > 0) {\r\n      // must iterate over all rows whether they exist yet or not\r\n      for (let i = 0; i < nRows; i++) {\r\n        const rowArguments = [start, count];\r\n        // eslint-disable-next-line no-loop-func\r\n        inserts.forEach(insert => {\r\n          rowArguments.push(insert[i] || null);\r\n        });\r\n        const row = this.getRow(i + 1);\r\n        // eslint-disable-next-line prefer-spread\r\n        row.splice.apply(row, rowArguments);\r\n      }\r\n    } else {\r\n      // nothing to insert, so just splice all rows\r\n      this._rows.forEach(r => {\r\n        if (r) {\r\n          r.splice(start, count);\r\n        }\r\n      });\r\n    }\r\n\r\n    // splice column definitions\r\n    const nExpand = inserts.length - count;\r\n    const nKeep = start + count;\r\n    const nEnd = this._columns.length;\r\n    if (nExpand < 0) {\r\n      for (let i = start + inserts.length; i <= nEnd; i++) {\r\n        this.getColumn(i).defn = this.getColumn(i - nExpand).defn;\r\n      }\r\n    } else if (nExpand > 0) {\r\n      for (let i = nEnd; i >= nKeep; i--) {\r\n        this.getColumn(i + nExpand).defn = this.getColumn(i).defn;\r\n      }\r\n    }\r\n    for (let i = start; i < start + inserts.length; i++) {\r\n      this.getColumn(i).defn = null;\r\n    }\r\n\r\n    // account for defined names\r\n    this.workbook.definedNames.spliceColumns(this.name, start, count, inserts.length);\r\n  }\r\n\r\n  get columnCount() {\r\n    let maxCount = 0;\r\n    this.eachRow(row => {\r\n      maxCount = Math.max(maxCount, row.cellCount);\r\n    });\r\n    return maxCount;\r\n  }\r\n\r\n  get actualColumnCount() {\r\n    // performance nightmare - for each row, counts all the columns used\r\n    const counts = [];\r\n    let count = 0;\r\n    this.eachRow(row => {\r\n      row.eachCell(({col}) => {\r\n        if (!counts[col]) {\r\n          counts[col] = true;\r\n          count++;\r\n        }\r\n      });\r\n    });\r\n    return count;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Rows\r\n\r\n  _commitRow() {\r\n    // nop - allows streaming reader to fill a document\r\n  }\r\n\r\n  get _lastRowNumber() {\r\n    // need to cope with results of splice\r\n    const rows = this._rows;\r\n    let n = rows.length;\r\n    while (n > 0 && rows[n - 1] === undefined) {\r\n      n--;\r\n    }\r\n    return n;\r\n  }\r\n\r\n  get _nextRow() {\r\n    return this._lastRowNumber + 1;\r\n  }\r\n\r\n  get lastRow() {\r\n    if (this._rows.length) {\r\n      return this._rows[this._rows.length - 1];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // find a row (if exists) by row number\r\n  findRow(r) {\r\n    return this._rows[r - 1];\r\n  }\r\n\r\n  get rowCount() {\r\n    return this._lastRowNumber;\r\n  }\r\n\r\n  get actualRowCount() {\r\n    // counts actual rows that have actual data\r\n    let count = 0;\r\n    this.eachRow(() => {\r\n      count++;\r\n    });\r\n    return count;\r\n  }\r\n\r\n  // get a row by row number.\r\n  getRow(r) {\r\n    let row = this._rows[r - 1];\r\n    if (!row) {\r\n      row = this._rows[r - 1] = new Row(this, r);\r\n    }\r\n    return row;\r\n  }\r\n\r\n  addRow(value) {\r\n    const row = this.getRow(this._nextRow);\r\n    row.values = value;\r\n    return row;\r\n  }\r\n\r\n  addRows(value) {\r\n    value.forEach(row => {\r\n      this.addRow(row);\r\n    });\r\n  }\r\n\r\n  spliceRows(start, count) {\r\n    // same problem as row.splice, except worse.\r\n    const inserts = Array.prototype.slice.call(arguments, 2);\r\n    const nKeep = start + count;\r\n    const nExpand = inserts.length - count;\r\n    const nEnd = this._rows.length;\r\n    let i;\r\n    let rSrc;\r\n    if (nExpand < 0) {\r\n      // remove rows\r\n      for (i = nKeep; i <= nEnd; i++) {\r\n        rSrc = this._rows[i - 1];\r\n        if (rSrc) {\r\n          const rDst = this.getRow(i + nExpand);\r\n          rDst.values = rSrc.values;\r\n          rDst.style = rSrc.style;\r\n          // eslint-disable-next-line no-loop-func\r\n          rSrc.eachCell({includeEmpty: true}, (cell, colNumber) => {\r\n            rDst.getCell(colNumber).style = cell.style;\r\n          });\r\n          this._rows[i - 1] = undefined;\r\n        } else {\r\n          this._rows[i + nExpand - 1] = undefined;\r\n        }\r\n      }\r\n    } else if (nExpand > 0) {\r\n      // insert new cells\r\n      for (i = nEnd; i >= nKeep; i--) {\r\n        rSrc = this._rows[i - 1];\r\n        if (rSrc) {\r\n          const rDst = this.getRow(i + nExpand);\r\n          rDst.values = rSrc.values;\r\n          rDst.style = rSrc.style;\r\n          // eslint-disable-next-line no-loop-func\r\n          rSrc.eachCell({includeEmpty: true}, (cell, colNumber) => {\r\n            rDst.getCell(colNumber).style = cell.style;\r\n          });\r\n        } else {\r\n          this._rows[i + nExpand - 1] = undefined;\r\n        }\r\n      }\r\n    }\r\n\r\n    // now copy over the new values\r\n    for (i = 0; i < inserts.length; i++) {\r\n      const rDst = this.getRow(start + i);\r\n      rDst.style = {};\r\n      rDst.values = inserts[i];\r\n    }\r\n\r\n    // account for defined names\r\n    this.workbook.definedNames.spliceRows(this.name, start, count, inserts.length);\r\n  }\r\n\r\n  // iterate over every row in the worksheet, including maybe empty rows\r\n  eachRow(options, iteratee) {\r\n    if (!iteratee) {\r\n      iteratee = options;\r\n      options = undefined;\r\n    }\r\n    if (options && options.includeEmpty) {\r\n      const n = this._rows.length;\r\n      for (let i = 1; i <= n; i++) {\r\n        iteratee(this.getRow(i), i);\r\n      }\r\n    } else {\r\n      this._rows.forEach(row => {\r\n        if (row && row.hasValues) {\r\n          iteratee(row, row.number);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // return all rows as sparse array\r\n  getSheetValues() {\r\n    const rows = [];\r\n    this._rows.forEach(row => {\r\n      if (row) {\r\n        rows[row.number] = row.values;\r\n      }\r\n    });\r\n    return rows;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Cells\r\n\r\n  // returns the cell at [r,c] or address given by r. If not found, return undefined\r\n  findCell(r, c) {\r\n    const address = colCache.getAddress(r, c);\r\n    const row = this._rows[address.row - 1];\r\n    return row ? row.findCell(address.col) : undefined;\r\n  }\r\n\r\n  // return the cell at [r,c] or address given by r. If not found, create a new one.\r\n  getCell(r, c) {\r\n    const address = colCache.getAddress(r, c);\r\n    const row = this.getRow(address.row);\r\n    return row.getCellEx(address);\r\n  }\r\n\r\n  // =========================================================================\r\n  // Merge\r\n\r\n  // convert the range defined by ['tl:br'], [tl,br] or [t,l,b,r] into a single 'merged' cell\r\n  mergeCells() {\r\n    const dimensions = new Range(Array.prototype.slice.call(arguments, 0)); // convert arguments into Array\r\n\r\n    // check cells aren't already merged\r\n    _.each(this._merges, merge => {\r\n      if (merge.intersects(dimensions)) {\r\n        throw new Error('Cannot merge already merged cells');\r\n      }\r\n    });\r\n\r\n    // apply merge\r\n    const master = this.getCell(dimensions.top, dimensions.left);\r\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\r\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\r\n        // merge all but the master cell\r\n        if (i > dimensions.top || j > dimensions.left) {\r\n          this.getCell(i, j).merge(master);\r\n        }\r\n      }\r\n    }\r\n\r\n    // index merge\r\n    this._merges[master.address] = dimensions;\r\n  }\r\n\r\n  _unMergeMaster(master) {\r\n    // master is always top left of a rectangle\r\n    const merge = this._merges[master.address];\r\n    if (merge) {\r\n      for (let i = merge.top; i <= merge.bottom; i++) {\r\n        for (let j = merge.left; j <= merge.right; j++) {\r\n          this.getCell(i, j).unmerge();\r\n        }\r\n      }\r\n      delete this._merges[master.address];\r\n    }\r\n  }\r\n\r\n  get hasMerges() {\r\n    // return true if this._merges has a merge object\r\n    return _.some(this._merges, Boolean);\r\n  }\r\n\r\n  // scan the range defined by ['tl:br'], [tl,br] or [t,l,b,r] and if any cell is part of a merge,\r\n  // un-merge the group. Note this function can affect multiple merges and merge-blocks are\r\n  // atomic - either they're all merged or all un-merged.\r\n  unMergeCells() {\r\n    const dimensions = new Range(Array.prototype.slice.call(arguments, 0)); // convert arguments into Array\r\n\r\n    // find any cells in that range and unmerge them\r\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\r\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\r\n        const cell = this.findCell(i, j);\r\n        if (cell) {\r\n          if (cell.type === Enums.ValueType.Merge) {\r\n            // this cell merges to another master\r\n            this._unMergeMaster(cell.master);\r\n          } else if (this._merges[cell.address]) {\r\n            // this cell is a master\r\n            this._unMergeMaster(cell);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Shared Formula\r\n  fillFormula(range, formula, results) {\r\n    // Define formula for top-left cell and share to rest\r\n    const decoded = colCache.decode(range);\r\n    const {top, left, bottom, right} = decoded;\r\n    const width = right - left + 1;\r\n    const masterAddress = colCache.encodeAddress(top, left);\r\n\r\n    // work out result accessor\r\n    let getResult;\r\n    if (typeof results === 'function') {\r\n      getResult = results;\r\n    } else if (Array.isArray(results)) {\r\n      if (Array.isArray(results[0])) {\r\n        getResult = (row, col) => results[row - top][col - left];\r\n      } else {\r\n        getResult = (row, col) => results[((row - top) * width) + (col - left)];\r\n      }\r\n    } else {\r\n      getResult = () => undefined;\r\n    }\r\n    let first = true;\r\n    for (let r = top; r <= bottom; r++) {\r\n      for (let c = left; c <= right; c++) {\r\n        if (first) {\r\n          this.getCell(r, c).value = {\r\n            formula,\r\n            result: getResult(r, c),\r\n          };\r\n          first = false;\r\n        } else {\r\n          this.getCell(r, c).value = {\r\n            sharedFormula: masterAddress,\r\n            result: getResult(r, c),\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // =========================================================================\r\n  // Images\r\n  addImage(imageId, range) {\r\n    const model = {\r\n      type: 'image',\r\n      imageId,\r\n      range,\r\n    };\r\n    this._media.push(new Image(this, model));\r\n  }\r\n\r\n  getImages() {\r\n    return this._media.filter(m => m.type === 'image');\r\n  }\r\n\r\n  addBackgroundImage(imageId) {\r\n    const model = {\r\n      type: 'background',\r\n      imageId,\r\n    };\r\n    this._media.push(new Image(this, model));\r\n  }\r\n\r\n  getBackgroundImageId() {\r\n    const image = this._media.find(m => m.type === 'background');\r\n    return image && image.imageId;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Tables\r\n  addTable(model) {\r\n    const table = new Table(this, model);\r\n    this.tables[model.name] = table;\r\n    return table;\r\n  }\r\n\r\n  getTable(name) {\r\n    return this.tables[name];\r\n  }\r\n\r\n  removeTable(name) {\r\n    delete this.tables[name];\r\n  }\r\n\r\n  getTables() {\r\n    return Object.values(this.tables);\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Deprecated\r\n  get tabColor() {\r\n    // eslint-disable-next-line no-console\r\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\r\n    return this.properties.tabColor;\r\n  }\r\n\r\n  set tabColor(value) {\r\n    // eslint-disable-next-line no-console\r\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\r\n    this.properties.tabColor = value;\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Model\r\n\r\n  get model() {\r\n    const model = {\r\n      id: this.id,\r\n      name: this.name,\r\n      dataValidations: this.dataValidations.model,\r\n      properties: this.properties,\r\n      state: this.state,\r\n      pageSetup: this.pageSetup,\r\n      headerFooter: this.headerFooter,\r\n      rowBreaks: this.rowBreaks,\r\n      views: this.views,\r\n      autoFilter: this.autoFilter,\r\n      media: this._media.map(medium => medium.model),\r\n      tables: Object.values(this.tables).map(table => table.model),\r\n    };\r\n\r\n    // =================================================\r\n    // columns\r\n    model.cols = Column.toModel(this.columns);\r\n\r\n    // ==========================================================\r\n    // Rows\r\n    const rows = (model.rows = []);\r\n    const dimensions = (model.dimensions = new Range());\r\n    this._rows.forEach(row => {\r\n      const rowModel = row && row.model;\r\n      if (rowModel) {\r\n        dimensions.expand(rowModel.number, rowModel.min, rowModel.number, rowModel.max);\r\n        rows.push(rowModel);\r\n      }\r\n    });\r\n\r\n    // ==========================================================\r\n    // Merges\r\n    model.merges = [];\r\n    _.each(this._merges, merge => {\r\n      model.merges.push(merge.range);\r\n    });\r\n\r\n    return model;\r\n  }\r\n\r\n  _parseRows(model) {\r\n    this._rows = [];\r\n    model.rows.forEach(rowModel => {\r\n      const row = new Row(this, rowModel.number);\r\n      this._rows[row.number - 1] = row;\r\n      row.model = rowModel;\r\n    });\r\n  }\r\n\r\n  _parseMergeCells(model) {\r\n    _.each(model.mergeCells, merge => {\r\n      this.mergeCells(merge);\r\n    });\r\n  }\r\n\r\n  set model(value) {\r\n    this.name = value.name;\r\n    this._columns = Column.fromModel(this, value.cols);\r\n    this._parseRows(value);\r\n\r\n    this._parseMergeCells(value);\r\n    this.dataValidations = new DataValidations(value.dataValidations);\r\n    this.properties = value.properties;\r\n    this.pageSetup = value.pageSetup;\r\n    this.headerFooter = value.headerFooter;\r\n    this.views = value.views;\r\n    this.autoFilter = value.autoFilter;\r\n    this._media = value.media.map(medium => new Image(this, medium));\r\n    this.tables = value.tables.reduce(\r\n      (tables, table) => {\r\n        const t = new Table;\r\n        t.model = table;\r\n        tables[table.name] = t;\r\n        return tables;\r\n      },\r\n      {}\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = Worksheet;\r\n"],"file":"worksheet.js"}